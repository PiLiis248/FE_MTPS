// import React from 'react';
// import testData from '../../data/test.json';
// import '../../../public/assets/css/testPage.css';
// import { useParams } from "react-router-dom";

// const TestPage = () => {
//     let { testId } = useParams();
//     const handleSubmit = (event) => {
//         event.preventDefault();
//         // Handle form submission logic here
//     };

//     return (
//         <div className="test-container">
//             <form onSubmit={handleSubmit}>
//                 {Object.entries(testData).map(([key, question], index) => (
//                     <div key={key} className="question-block">
//                         <p>{`${index + 1}. ${question.question}`}</p>
//                         <div className="options">
//                             {Object.entries(question.options).map(([optionKey, optionValue]) => (
//                                 <label key={optionKey} className="option">
//                                     <input type="radio" name={`question${index}`} value={optionKey} />
//                                     <span>{`${optionKey}. ${optionValue.text}`}</span>
//                                 </label>
//                             ))}
//                         </div>
//                     </div>
//                 ))}
//                 <button type="submit" className="submit-btn">Submit Test</button>
//             </form>
//         </div>
//     );
// };

// export default TestPage;


// import React from 'react';
// import testData from '../../data/test.json'; // Ensure the path to your test.json is correct

// const TestPage = () => {
//     const handleSubmit = (event) => {
//         event.preventDefault();
//         // Handle form submission logic here
//         // You might want to collect answers and compare them to correct answers or send them somewhere
//         console.log("Form submitted");
//     };

//     return (
//         <div className="test-container">
//             <form onSubmit={handleSubmit}>
//                 {testData.questions.map((question, index) => (
//                     <div key={index} className="question-block">
//                         <p>{question.text}</p>
//                         {question.options.map((option, optionIndex) => (
//                             <label key={optionIndex} className="option">
//                                 <input type="radio" name={`question${index}`} value={option} />
//                                 {option}
//                             </label>
//                         ))}
//                     </div>
//                 ))}
//                 <button type="submit">Submit Test</button>
//             </form>
//         </div>
//     );
// };

// export default TestPage;


// import React from 'react';
// import testData from '../../data/test.json'; // Ensure the path to your test.json is correct
// import '../../../public/assets/css/testPage.css'

// const TestPage = () => {
//     const handleSubmit = (event) => {
//         event.preventDefault();
//         // Handle form submission logic here
//         // You might want to collect answers and compare them to correct answers or send them somewhere
//         console.log("Form submitted");
//     };

//     return (
//         <div className="test-container">
//             {testData.map((test, testIndex) => (
//                 <div key={test.id} className="test">
//                     <h2>Test {testIndex + 1}</h2>
//                     <form onSubmit={handleSubmit}>
//                         {Object.keys(test.questions).map((questionId) => {
//                             const question = test.questions[questionId];
//                             return (
//                                 <div key={questionId} className="question-block">
//                                     <p>{question.question}</p>
//                                     {Object.keys(question.options).map((optionKey) => {
//                                         const option = question.options[optionKey];
//                                         return (
//                                             <label key={optionKey} className="option">
//                                                 <input type="radio" name={`question${questionId}`} value={optionKey} />
//                                                 {option.text}
//                                             </label>
//                                         );
//                                     })}
//                                 </div>
//                             );
//                         })}
//                         <button type="submit">Submit Test</button>
//                     </form>
//                 </div>
//             ))}
//         </div>
//     );
// };

// export default TestPage;

// import React from 'react';
// import testData from '../../data/test.json'; // Ensure the path to your test.json is correct
// import '../../../public/assets/css/testPage.css'
// const TestPage = () => {
//     let { testId } = useParams(); // Get the testId from URL parameters

//     // Filter the testData to find the test with the matching testId
//     const test = testData.find(test => test.id === testId);

//     const handleSubmit = (event) => {
//         event.preventDefault();
//         // Handle form submission logic here
//         console.log("Form submitted");
//     };

//     // If no test matches the testId, you can return a message or redirect
//     if (!test) {
//         return <div>Test not found</div>;
//     }

//     return (
//         <div className="test-container">
//             <div key={test.id} className="test">
//                 <h2>{test.title}</h2>
//                 <form onSubmit={handleSubmit}>
//                     {test.questions.map((question, questionIndex) => (
//                         <div key={questionIndex} className="question-block">
//                             <p>{question.question}</p>
//                             {question.options.map((option, optionIndex) => (
//                                 <label key={optionIndex} className="option">
//                                     <input type="radio" name={`question${questionIndex}`} value={option} />
//                                     {option}
//                                 </label>
//                             ))}
//                         </div>
//                     ))}
//                     <button type="submit">Submit Test</button>
//                 </form>
//             </div>
//         </div>
//     );
// };

// export default TestPage;

// import React, { useState, useEffect } from 'react';
// import { useParams } from 'react-router-dom';
// import axios from 'axios';
// import '../../../public/assets/css/testPage.css'; // Update the path as necessary

// const TestPage = () => {
//     let { testId } = useParams(); // Get the testId from URL parameters
//     const [test, setTest] = useState(null);

//     useEffect(() => {
//         const fetchTest = async () => {
//             try {
//                 const response = await axios.get(`/test/${testId}`);
//                 setTest(response.data);
//             } catch (error) {
//                 console.error('Failed to fetch test data:', error);
//                 // Handle error (e.g., test not found or server error)
//             }
//         };

//         fetchTest();
//     }, [testId]);

//     const handleSubmit = (event) => {
//         event.preventDefault();
//         console.log("Form submitted");
//         // Further form submission logic here
//     };

//     if (!test) {
//         return <div>Loading test...</div>;
//     }

//     return (
//         <div className="test-container">
//             <div key={test.id} className="test">
//                 <h2>{test.title}</h2>
//                 <form onSubmit={handleSubmit}>
//                     {test.questions.map((question, questionIndex) => (
//                         <div key={questionIndex} className="question-block">
//                             <p>{question.question}</p>
//                             {question.options.map((option, optionIndex) => (
//                                 <label key={optionIndex} className="option">
//                                     <input type="radio" name={`question${questionIndex}`} value={option} />
//                                     {option}
//                                 </label>
//                             ))}
//                         </div>
//                     ))}
//                     <button type="submit">Submit Test</button>
//                 </form>
//             </div>
//         </div>
//     );
// };

// export default TestPage;


import React from 'react';
import '../../../public/assets/css/testPage.css'; // Ensure this path is correct for your project

const TestPage = () => {
    // Static assignment of testId for demonstration purposes
    const testId = 'testId002';

    // Mock post data
    const postData = {
        "id": "post02",
        "name": "Ho·∫°t ƒë·ªông tr·ª±c tuy·∫øn: 'T√¨m hi·ªÉu v·ªÅ ƒêo√†n TNCS H·ªì Ch√≠ Minh'",
        "desc": "üåû H√≤a trong kh√¥ng kh√≠ ph·∫•n kh·ªüi, ch√†o m·ª´ng k·ª∑ ni·ªám 93 nƒÉm ng√†y th√†nh l·∫≠p ƒêo√†n TNCS H·ªì Ch√≠ Minh (26/03/1931 - 26/03/2024), ƒêo√†n Khoa To√°n - Th·ªëng k√™ t·ªï ch·ª©c ho·∫°t ƒë·ªông 'T√¨m hi·ªÉu v·ªÅ ƒêo√†n TNCS H·ªì Ch√≠ Minh'. üåû Nh·∫±m tuy√™n truy·ªÅn, gi√°o d·ª•c v·ªÅ qu√° tr√¨nh ra ƒë·ªùi, ph√°t tri·ªÉn v√† truy·ªÅn th·ªëng l·ªãch s·ª≠ v·∫ª vang c·ªßa ƒêo√†n TNCS H·ªì Ch√≠ Minh. Qua ƒë√≥ gi√∫p ƒêo√†n vi√™n th√™m t·ª± h√†o v·ªÅ t·ªï ch·ª©c ch√≠nh tr·ªã - x√£ h·ªôi c·ªßa m√¨nh v√† gi√∫p Thanh ni√™n hi·ªÉu r√µ h∆°n v·ªÅ vai tr√≤ v√† s·ª© m·ªánh t·ªï ch·ª©c ƒë·ªÉ ti·∫øp t·ª•c ph·∫•n ƒë·∫•u tr·ªü th√†nh ƒêo√†n Vi√™n.",
        "status": true,
        "startTime": "15/03/2024",
        "endTime": "17/03/2024",
        "point": 5,
        "location": "Online",
        "numberParticipants": 500,
        "testId": "testId002"
    };

    // Mock test data
    const testMockData = {
        "id": "testId002",
        "title": "Test 2",
        "questions": {
            "1": {
                "question": "Trong th·ªùi gian ·ªü n∆∞·ªõc ngo√†i, Nguy·ªÖn T·∫•t Th√†nh ƒë√£ l√†m nh·ªØng c√¥ng vi·ªác g√¨?",
                "correctAnswer": "D",
                "options": {
                    "A": {
                        "text": "Ph·ª• b·∫øp, c√†o tuy·∫øt",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "ƒê·ªët l√≤, b√°n b√°o",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "Th·ª£ ·∫£nh, l√†m b√°nh",
                        "isCorrect": false
                    },
                    "D": {
                        "text": "T·∫•t c·∫£ c√°c c√¥ng vi·ªác tr√™n",
                        "isCorrect": true
                    }
                }
            },
            "2": {
                "question": "Theo H·ªì Ch√≠ Minh, h·ªçc ƒë·ªÉ l√†m g√¨?",
                "correctAnswer": "D",
                "options": {
                    "A": {
                        "text": "L√†m vi·ªác",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "L√†m c√°n b·ªô",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "L√†m ng∆∞·ªùi",
                        "isCorrect": false
                    },
                    "D": {
                        "text": "C·∫£ a, b, c",
                        "isCorrect": true
                    }
                }
            },
            "3": {
                "question": "Nguy·ªÖn T·∫•t Th√†nh l√∫c ra ƒëi t√¨m ƒë∆∞·ªùng c·ª©u n∆∞·ªõc bao nhi√™u tu·ªïi?",
                "correctAnswer": "C",
                "options": {
                    "A": {
                        "text": "19 tu·ªïi",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "20 tu·ªïi",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "21 tu·ªïi",
                        "isCorrect": true
                    },
                    "D": {
                        "text": "24 tu·ªïi",
                        "isCorrect": false
                    }
                }
            },
            "4": {
                "question": "M·∫∑t tr·∫≠n Li√™n - Vi·ªát ƒë∆∞·ª£c th√†nh l·∫≠p v√†o th·ªùi gian n√†o?",
                "correctAnswer": "B",
                "options": {
                    "A": {
                        "text": "NƒÉm 1945",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "NƒÉm 1951",
                        "isCorrect": true
                    },
                    "C": {
                        "text": "NƒÉm 1960",
                        "isCorrect": false
                    },
                    "D": {
                        "text": "NƒÉm 1969",
                        "isCorrect": false
                    }
                }
            },
            "5": {
                "question": "Nguy·ªÖn √°i Qu·ªëc g·ª≠i b·∫£n 'Y√™u s√°ch c·ªßa nh√¢n d√¢n Vi·ªát Nam' t·ªõi H·ªôi ngh·ªã V√©cxay v√†o ng√†y th√°ng nƒÉm n√†o?",
                "correctAnswer": "C",
                "options": {
                    "A": {
                        "text": "18/6/1917",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "18/6/1918",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "18/6/1919",
                        "isCorrect": true
                    },
                    "D": {
                        "text": "18/6/1920",
                        "isCorrect": false
                    }
                }
            },
            "6": {
                "question": "Theo H·ªì Ch√≠ Minh, mu·ªën th·ª©c t·ªânh m·ªôt d√¢n t·ªôc, tr∆∞·ªõc h·∫øt ph·∫£i th·ª©c t·ªânh b·ªô ph·∫≠n d√¢n c∆∞ n√†o?",
                "correctAnswer": "C",
                "options": {
                    "A": {
                        "text": "T·∫ßng l·ªõp tr√≠ th·ª©c",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "Thi·∫øu ni√™n, nhi ƒë·ªìng",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "Thanh ni√™n",
                        "isCorrect": true
                    },
                    "D": {
                        "text": "C·∫£ a,b, v√† c",
                        "isCorrect": false
                    }
                }
            },
            "7": {
                "question": "B√°c H·ªì vi·∫øt: 'Nay ch√∫ng ta ƒë√£ gi√†nh ƒë∆∞·ª£c quy·ªÅn ƒë·ªôc l·∫≠p, m·ªôt trong nh·ªØng c√¥ng vi·ªác ph·∫£i th·ª±c hi·ªán c·∫•p t·ªëc trong l√∫c n√†y, l√† n√¢ng cao d√¢n tr√≠ Ph·ª• n·ªØ l·∫°i c√†ng c·∫ßn ph·∫£i h·ªçc' ƒêo·∫°n vƒÉn tr√™n tr√≠ch t·ª´ vƒÉn b·∫£n n√†o c·ªßa H·ªì Ch√≠ Minh",
                "correctAnswer": "A",
                "options": {
                    "A": {
                        "text": "Ch·ªëng n·∫°n th·∫•t h·ªçc",
                        "isCorrect": true
                    },
                    "B": {
                        "text": "S·∫Øc l·ªánh th√†nh l·∫≠p Nha b√¨nh d√¢n h·ªçc v·ª•",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "S·∫Øc l·ªánh thi·∫øt l·∫≠p H·ªôi ƒë·ªìng c·ªë v·∫•n h·ªçc ch√≠nh",
                        "isCorrect": false
                    },
                    "D": {
                        "text": "ƒê·ªùi s·ªëng m·ªõi",
                        "isCorrect": false
                    }
                }
            },
            "8": {
                "question": "Theo H·ªì Ch√≠ Minh, mu·ªën x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi tr∆∞·ªõc h·∫øt c·∫ßn c√≥ c√°i g√¨?",
                "correctAnswer": "C",
                "options": {
                    "A": {
                        "text": "Khoa h·ªçc - k·ªπ thu·∫≠t ti√™n ti·∫øn",
                        "isCorrect": false
                    },
                    "B": {
                        "text": "Kinh t·∫ø ph√°t tri·ªÉn",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "Con ng∆∞·ªùi x√£ h·ªôi ch·ªß nghƒ©a",
                        "isCorrect": true
                    },
                    "D": {
                        "text": "C√≥ ti·ªÅn",
                        "isCorrect": false
                    }
                }
            },
            "9": {
                "question": " 'T·∫•t c·∫£ c√°c d√¢n t·ªôc tr√™n th·∫ø gi·ªõi ƒë·ªÅu sinh ra b√¨nh ƒë·∫≥ng, d√¢n t·ªôc n√†o c≈©ng c√≥ quy·ªÅn s·ªëng, quy·ªÅn sung s∆∞·ªõng v√† quy·ªÅn t·ª± do' H·ªì Ch√≠ Minh n√≥i c√¢u ƒë√≥ trong vƒÉn ki·ªán n√†o?",
                "correctAnswer": "A",
                "options": {
                    "A": {
                        "text": " Tuy√™n ng√¥n ƒë·ªôc l·∫≠p (1945)",
                        "isCorrect": true
                    },
                    "B": {
                        "text": "ƒê∆∞·ªùng C√°ch m·ªánh",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "B·∫£n √°n ch·∫ø ƒë·ªô th·ª±c d√¢n Ph√°p",
                        "isCorrect": false
                    },
                    "D": {
                        "text": "L·ªùi k√™u g·ªçi to√†n qu·ªëc kh√°ng",
                        "isCorrect": false
                    }
                }
            },
            "10": {
                "question": "H·ªì Ch√≠ Minh v√≠ tu·ªïi tr·∫ª nh∆∞ m√πa n√†o trong nƒÉm?",
                "correctAnswer": "C",
                "options": {
                    "A": {
                        "text": "M√πa xu√¢n",
                        "isCorrect": true
                    },
                    "B": {
                        "text": "M√πa thu",
                        "isCorrect": false
                    },
                    "C": {
                        "text": "M√πa h·∫°",
                        "isCorrect": false
                    },
                    "D": {
                        "text": "M√πa ƒë√¥ng",
                        "isCorrect": false
                    }
                }
            }   
            // Assume there are more questions formatted similarly
        }
    };

    // Directly using testMockData assuming testId matches
    const currentTest = testMockData;

    const handleSubmit = (event) => {
        event.preventDefault();
        console.log("Form submitted");
        // Handle form submission logic here
    };

    // return (
    //     <div className="test-container">
    //         <h2>{postData.name}</h2>
    //         <div class="info-item"><strong>Description:</strong> {postData.desc}</div>
    //         <div class="info-item"><strong>Start Time:</strong> {postData.startTime}</div>
    //         <div class="info-item"><strong>End Time:</strong> {postData.endTime}</div>
    //         <div class="info-item"><strong>Location:</strong> {postData.location}</div>

    //         <hr />
    //         <form onSubmit={handleSubmit}>
    //             {Object.entries(currentTest.questions).map(([questionId, questionDetails], index) => (
    //                 <div key={questionId} className="question-block">
    //                     <p><strong>Question {index + 1}:</strong> {questionDetails.question}</p>
    //                     {Object.entries(questionDetails.options).map(([optionKey, optionValue]) => (
    //                     <div key={optionKey} className="option">
    //                         <label>
    //                             <input type="radio" name={`question${index}`} value={optionKey} />
    //                             {optionValue.text}
    //                         </label>
    //                     </div>
    //                 ))}
    //                 </div>
    //             ))}
    //             <button type="submit" className="submit-button">Submit Test</button>
    //         </form>
    //     </div>
    // );

    return (
        <div className="test-container">
            <h2>{postData.name}</h2>
            <div className="info-item"><strong>Description:</strong> {postData.desc}</div>
            <div className="info-item"><strong>Start Time:</strong> {postData.startTime}</div>
            <div className="info-item"><strong>End Time:</strong> {postData.endTime}</div>
            <div className="info-item"><strong>Location:</strong> {postData.location}</div>
    
            <hr />
            <form onSubmit={handleSubmit}>
                {Object.entries(currentTest.questions).map(([questionId, questionDetails], index) => (
                    <div key={questionId} className="question-block">
                        <p>
                            <strong>Question {index + 1}:</strong> {questionDetails.question}
                            <span className="required-star">*</span>
                        </p>
                        {Object.entries(questionDetails.options).map(([optionKey, optionValue]) => (
                            <div key={optionKey} className="option">
                                <label>
                                    <input type="radio" name={`question${index}`} value={optionKey} />
                                    {optionValue.text}
                                </label>
                            </div>
                        ))}
                    </div>
                ))}
                <button type="submit" className="submit-button">Submit Test</button>
            </form>
        </div>
    );
    
};

export default TestPage;